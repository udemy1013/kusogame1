//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Leaderboards.Authoring.Client.Models;
using Unity.Services.Leaderboards.Authoring.Client.Http;
using Unity.Services.Leaderboards.Authoring.Client.Default;

namespace Unity.Services.Leaderboards.Authoring.Client.Apis.Default
{
    /// <summary>
    /// Interface for the DefaultApiClient
    /// </summary>
    internal interface IDefaultApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create Leaderboard.
            /// </summary>
            /// <param name="request">Request object for CreateLeaderboard.</param>
            /// <param name="operationConfiguration">Configuration for CreateLeaderboard.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> CreateLeaderboardAsync(Unity.Services.Leaderboards.Authoring.Client.Default.CreateLeaderboardRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Leaderboard.
            /// </summary>
            /// <param name="request">Request object for DeleteLeaderboard.</param>
            /// <param name="operationConfiguration">Configuration for DeleteLeaderboard.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteLeaderboardAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Leaderboard Player Score.
            /// </summary>
            /// <param name="request">Request object for DeleteLeaderboardPlayerScore.</param>
            /// <param name="operationConfiguration">Configuration for DeleteLeaderboardPlayerScore.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteLeaderboardPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardPlayerScoreRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Leaderboard Player Score from all Live Leaderboards.
            /// </summary>
            /// <param name="request">Request object for DeleteLeaderboardPlayerScoreAllLiveLeaderboards.</param>
            /// <param name="operationConfiguration">Configuration for DeleteLeaderboardPlayerScoreAllLiveLeaderboards.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteLeaderboardPlayerScoreAllLiveLeaderboardsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardPlayerScoreAllLiveLeaderboardsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Leaderboard Version.
            /// </summary>
            /// <param name="request">Request object for DeleteLeaderboardVersion.</param>
            /// <param name="operationConfiguration">Configuration for DeleteLeaderboardVersion.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteLeaderboardVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardVersionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Bucket Scores.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardBucketScores.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardBucketScores.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardScoresPage1>> GetLeaderboardBucketScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketScoresRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Bucket Scores By Tier.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardBucketScoresByTier.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardBucketScoresByTier.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardTierScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardTierScoresPage1>> GetLeaderboardBucketScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketScoresByTierRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Bucket IDs.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardBuckets.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardBuckets.</param>
            /// <returns>Task for a Response object containing status code, headers, and BucketsPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<BucketsPage1>> GetLeaderboardBucketsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Config.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardConfig.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardConfig.</param>
            /// <returns>Task for a Response object containing status code, headers, and UpdatedLeaderboardConfig1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UpdatedLeaderboardConfig1>> GetLeaderboardConfigAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardConfigRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Configs.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardConfigs.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardConfigs.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardConfigPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardConfigPage1>> GetLeaderboardConfigsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardConfigsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Player Range.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardPlayerRange.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerRange.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardScores1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardScores1>> GetLeaderboardPlayerRangeAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerRangeRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Player Range for archived leaderboard version.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardPlayerRangeArchivedVersion.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerRangeArchivedVersion.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionRange1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionRange1>> GetLeaderboardPlayerRangeArchivedVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerRangeArchivedVersionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Player Score.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardPlayerScore.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerScore.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardEntry1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardEntry1>> GetLeaderboardPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerScoreRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Players Scores by Player Ids.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardPlayersScoresByPlayerIds.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayersScoresByPlayerIds.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresWithNotFoundPlayerIds1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardScoresWithNotFoundPlayerIds1>> GetLeaderboardPlayersScoresByPlayerIdsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayersScoresByPlayerIdsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Players Scores by Player Ids for Archived Leaderboard.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardPlayersScoresByPlayerIdsArchivedVersion.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayersScoresByPlayerIdsArchivedVersion.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresByPlayerIds1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionScoresByPlayerIds1>> GetLeaderboardPlayersScoresByPlayerIdsArchivedVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayersScoresByPlayerIdsArchivedVersionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Scores.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardScores.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardScores.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardScoresPage1>> GetLeaderboardScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardScoresRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Scores By Tier.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardScoresByTier.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardScoresByTier.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardTierScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardTierScoresPage1>> GetLeaderboardScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardScoresByTierRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Bucket Scores.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionBucketScores.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBucketScores.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionScoresPage1>> GetLeaderboardVersionBucketScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketScoresRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Bucket Scores By Tier.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionBucketScoresByTier.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBucketScoresByTier.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionTierScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionTierScoresPage1>> GetLeaderboardVersionBucketScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketScoresByTierRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Bucket IDs.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionBuckets.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBuckets.</param>
            /// <returns>Task for a Response object containing status code, headers, and VersionBucketsPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<VersionBucketsPage1>> GetLeaderboardVersionBucketsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Player Score.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionPlayerScore.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionPlayerScore.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionEntry1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionEntry1>> GetLeaderboardVersionPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionPlayerScoreRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Scores.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionScores.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionScores.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionScoresPage1>> GetLeaderboardVersionScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionScoresRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Leaderboard Version Scores By Tier.
            /// </summary>
            /// <param name="request">Request object for GetLeaderboardVersionScoresByTier.</param>
            /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionScoresByTier.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionTierScoresPage1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionTierScoresPage1>> GetLeaderboardVersionScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionScoresByTierRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Reset Leaderboard Scores.
            /// </summary>
            /// <param name="request">Request object for ResetLeaderboardScores.</param>
            /// <param name="operationConfiguration">Configuration for ResetLeaderboardScores.</param>
            /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionId1 object.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LeaderboardVersionId1>> ResetLeaderboardScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.ResetLeaderboardScoresRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update Leaderboard Config.
            /// </summary>
            /// <param name="request">Request object for UpdateLeaderboardConfig.</param>
            /// <param name="operationConfiguration">Configuration for UpdateLeaderboardConfig.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UpdateLeaderboardConfigAsync(Unity.Services.Leaderboards.Authoring.Client.Default.UpdateLeaderboardConfigRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IDefaultApiClient"/>
    internal class DefaultApiClient : BaseApiClient, IDefaultApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// DefaultApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for DefaultApiClient.</param>
        /// <param name="configuration"> DefaultApiClient Configuration object.</param>
        public DefaultApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            
        }


        /// <summary>
        /// Async Operation.
        /// Create Leaderboard.
        /// </summary>
        /// <param name="request">Request object for CreateLeaderboard.</param>
        /// <param name="operationConfiguration">Configuration for CreateLeaderboard.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> CreateLeaderboardAsync(Unity.Services.Leaderboards.Authoring.Client.Default.CreateLeaderboardRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201",  null },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Leaderboard.
        /// </summary>
        /// <param name="request">Request object for DeleteLeaderboard.</param>
        /// <param name="operationConfiguration">Configuration for DeleteLeaderboard.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteLeaderboardAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Leaderboard Player Score.
        /// </summary>
        /// <param name="request">Request object for DeleteLeaderboardPlayerScore.</param>
        /// <param name="operationConfiguration">Configuration for DeleteLeaderboardPlayerScore.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteLeaderboardPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardPlayerScoreRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Leaderboard Player Score from all Live Leaderboards.
        /// </summary>
        /// <param name="request">Request object for DeleteLeaderboardPlayerScoreAllLiveLeaderboards.</param>
        /// <param name="operationConfiguration">Configuration for DeleteLeaderboardPlayerScoreAllLiveLeaderboards.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteLeaderboardPlayerScoreAllLiveLeaderboardsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardPlayerScoreAllLiveLeaderboardsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Leaderboard Version.
        /// </summary>
        /// <param name="request">Request object for DeleteLeaderboardVersion.</param>
        /// <param name="operationConfiguration">Configuration for DeleteLeaderboardVersion.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteLeaderboardVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.DeleteLeaderboardVersionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Bucket Scores.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardBucketScores.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardBucketScores.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardScoresPage1>> GetLeaderboardBucketScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketScoresRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardScoresPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Bucket Scores By Tier.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardBucketScoresByTier.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardBucketScoresByTier.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardTierScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardTierScoresPage1>> GetLeaderboardBucketScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketScoresByTierRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardTierScoresPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardTierScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardTierScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Bucket IDs.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardBuckets.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardBuckets.</param>
        /// <returns>Task for a Response object containing status code, headers, and BucketsPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<BucketsPage1>> GetLeaderboardBucketsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardBucketsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(BucketsPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<BucketsPage1>(response, statusCodeToTypeMap);
            return new Response<BucketsPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Config.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardConfig.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardConfig.</param>
        /// <returns>Task for a Response object containing status code, headers, and UpdatedLeaderboardConfig1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UpdatedLeaderboardConfig1>> GetLeaderboardConfigAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardConfigRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UpdatedLeaderboardConfig1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UpdatedLeaderboardConfig1>(response, statusCodeToTypeMap);
            return new Response<UpdatedLeaderboardConfig1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Configs.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardConfigs.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardConfigs.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardConfigPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardConfigPage1>> GetLeaderboardConfigsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardConfigsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardConfigPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardConfigPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardConfigPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Player Range.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardPlayerRange.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerRange.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardScores1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardScores1>> GetLeaderboardPlayerRangeAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerRangeRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardScores1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardScores1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardScores1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Player Range for archived leaderboard version.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardPlayerRangeArchivedVersion.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerRangeArchivedVersion.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionRange1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionRange1>> GetLeaderboardPlayerRangeArchivedVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerRangeArchivedVersionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionRange1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionRange1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionRange1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Player Score.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardPlayerScore.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayerScore.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardEntry1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardEntry1>> GetLeaderboardPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayerScoreRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardEntry1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardEntry1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardEntry1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Players Scores by Player Ids.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardPlayersScoresByPlayerIds.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayersScoresByPlayerIds.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresWithNotFoundPlayerIds1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardScoresWithNotFoundPlayerIds1>> GetLeaderboardPlayersScoresByPlayerIdsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayersScoresByPlayerIdsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardScoresWithNotFoundPlayerIds1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardScoresWithNotFoundPlayerIds1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardScoresWithNotFoundPlayerIds1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Players Scores by Player Ids for Archived Leaderboard.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardPlayersScoresByPlayerIdsArchivedVersion.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardPlayersScoresByPlayerIdsArchivedVersion.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresByPlayerIds1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionScoresByPlayerIds1>> GetLeaderboardPlayersScoresByPlayerIdsArchivedVersionAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardPlayersScoresByPlayerIdsArchivedVersionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionScoresByPlayerIds1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionScoresByPlayerIds1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionScoresByPlayerIds1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Scores.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardScores.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardScores.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardScoresPage1>> GetLeaderboardScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardScoresRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardScoresPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Scores By Tier.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardScoresByTier.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardScoresByTier.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardTierScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardTierScoresPage1>> GetLeaderboardScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardScoresByTierRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardTierScoresPage1)   },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardTierScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardTierScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Bucket Scores.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionBucketScores.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBucketScores.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionScoresPage1>> GetLeaderboardVersionBucketScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketScoresRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionScoresPage1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Bucket Scores By Tier.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionBucketScoresByTier.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBucketScoresByTier.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionTierScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionTierScoresPage1>> GetLeaderboardVersionBucketScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketScoresByTierRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionTierScoresPage1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionTierScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionTierScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Bucket IDs.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionBuckets.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionBuckets.</param>
        /// <returns>Task for a Response object containing status code, headers, and VersionBucketsPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<VersionBucketsPage1>> GetLeaderboardVersionBucketsAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionBucketsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(VersionBucketsPage1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<VersionBucketsPage1>(response, statusCodeToTypeMap);
            return new Response<VersionBucketsPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Player Score.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionPlayerScore.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionPlayerScore.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionEntry1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionEntry1>> GetLeaderboardVersionPlayerScoreAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionPlayerScoreRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionEntry1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionEntry1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionEntry1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Scores.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionScores.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionScores.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionScoresPage1>> GetLeaderboardVersionScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionScoresRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionScoresPage1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Leaderboard Version Scores By Tier.
        /// </summary>
        /// <param name="request">Request object for GetLeaderboardVersionScoresByTier.</param>
        /// <param name="operationConfiguration">Configuration for GetLeaderboardVersionScoresByTier.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionTierScoresPage1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionTierScoresPage1>> GetLeaderboardVersionScoresByTierAsync(Unity.Services.Leaderboards.Authoring.Client.Default.GetLeaderboardVersionScoresByTierRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionTierScoresPage1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionTierScoresPage1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionTierScoresPage1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Reset Leaderboard Scores.
        /// </summary>
        /// <param name="request">Request object for ResetLeaderboardScores.</param>
        /// <param name="operationConfiguration">Configuration for ResetLeaderboardScores.</param>
        /// <returns>Task for a Response object containing status code, headers, and LeaderboardVersionId1 object.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LeaderboardVersionId1>> ResetLeaderboardScoresAsync(Unity.Services.Leaderboards.Authoring.Client.Default.ResetLeaderboardScoresRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LeaderboardVersionId1)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LeaderboardVersionId1>(response, statusCodeToTypeMap);
            return new Response<LeaderboardVersionId1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update Leaderboard Config.
        /// </summary>
        /// <param name="request">Request object for UpdateLeaderboardConfig.</param>
        /// <param name="operationConfiguration">Configuration for UpdateLeaderboardConfig.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Leaderboards.Authoring.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UpdateLeaderboardConfigAsync(Unity.Services.Leaderboards.Authoring.Client.Default.UpdateLeaderboardConfigRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetLeaderboardConfigs400Response)   },{"401", typeof(BasicErrorResponse1)   },{"404", typeof(BasicErrorResponse1)   },{"429", typeof(BasicErrorResponse1)   },{"500", typeof(BasicErrorResponse1)   },{"503", typeof(BasicErrorResponse1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PATCH",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                finalConfiguration.RetryPolicyConfiguration,
                finalConfiguration.StatusCodePolicyConfiguration);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }

    }
}
