//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Leaderboards.Authoring.Client.Http;



namespace Unity.Services.Leaderboards.Authoring.Client.Models
{
    /// <summary>
    /// LeaderboardConfig2ResetConfig model
    /// </summary>
    [Preserve]
    [DataContract(Name = "LeaderboardConfig_2_resetConfig")]
    internal class LeaderboardConfig2ResetConfig
    {
        /// <summary>
        /// Creates an instance of LeaderboardConfig2ResetConfig.
        /// </summary>
        /// <param name="start">The date and time that the first reset should occur, formatted according to the &lt;a href&#x3D;&#39;https://www.rfc-editor.org/rfc/rfc3339#section-5.8&#39;&gt;RFC-3339 specification&lt;/a&gt;. If &#x60;start&#x60; is provided without a schedule, then a one-off reset will occur at the date and time specified by &#x60;start&#x60;. The date and time specified by &#x60;start&#x60; must be later that the time of the request. Accuracy of the &#x60;start&#x60; date and time is maintained to the minute. </param>
        /// <param name="schedule">The schedule on which to reset the leaderboard. Can be either a valid five-element cron tab or a cron string using &#x60;@every&#x60; shorthand (see &lt;a href&#x3D;&#39;https://pkg.go.dev/github.com/robfig/cron&#39;&gt;Cron Package Specifications&lt;/a&gt; for details), e.g. \&quot;@every 72h\&quot; for a leaderboard reset every three days. The schedule will be applied after the first reset specified by &#x60;start&#x60;. The schedule can not be more frequent than once per minute. </param>
        /// <param name="archive">Whether or not to archive the current set of scores before resetting the leaderboard</param>
        [Preserve]
        public LeaderboardConfig2ResetConfig(DateTime start, string schedule = default, bool archive = default)
        {
            Start = start;
            Schedule = schedule;
            Archive = archive;
        }

        /// <summary>
        /// The date and time that the first reset should occur, formatted according to the &lt;a href&#x3D;&#39;https://www.rfc-editor.org/rfc/rfc3339#section-5.8&#39;&gt;RFC-3339 specification&lt;/a&gt;. If &#x60;start&#x60; is provided without a schedule, then a one-off reset will occur at the date and time specified by &#x60;start&#x60;. The date and time specified by &#x60;start&#x60; must be later that the time of the request. Accuracy of the &#x60;start&#x60; date and time is maintained to the minute. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Start{ get; }
        
        /// <summary>
        /// The schedule on which to reset the leaderboard. Can be either a valid five-element cron tab or a cron string using &#x60;@every&#x60; shorthand (see &lt;a href&#x3D;&#39;https://pkg.go.dev/github.com/robfig/cron&#39;&gt;Cron Package Specifications&lt;/a&gt; for details), e.g. \&quot;@every 72h\&quot; for a leaderboard reset every three days. The schedule will be applied after the first reset specified by &#x60;start&#x60;. The schedule can not be more frequent than once per minute. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public string Schedule{ get; }
        
        /// <summary>
        /// Whether or not to archive the current set of scores before resetting the leaderboard
        /// </summary>
        [Preserve]
        [DataMember(Name = "archive", EmitDefaultValue = true)]
        public bool Archive{ get; }
    
        /// <summary>
        /// Formats a LeaderboardConfig2ResetConfig into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Start != null)
            {
                serializedModel += "start," + Start.ToString() + ",";
            }
            if (Schedule != null)
            {
                serializedModel += "schedule," + Schedule + ",";
            }
            serializedModel += "archive," + Archive.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a LeaderboardConfig2ResetConfig as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Start != null)
            {
                var startStringValue = Start.ToString();
                dictionary.Add("start", startStringValue);
            }
            
            if (Schedule != null)
            {
                var scheduleStringValue = Schedule.ToString();
                dictionary.Add("schedule", scheduleStringValue);
            }
            
            var archiveStringValue = Archive.ToString();
            dictionary.Add("archive", archiveStringValue);
            
            return dictionary;
        }
    }
}
