//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Leaderboards.Authoring.Client.Http;



namespace Unity.Services.Leaderboards.Authoring.Client.Models
{
    /// <summary>
    /// UpdatedLeaderboardConfig1 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "UpdatedLeaderboardConfig_1")]
    internal class UpdatedLeaderboardConfig1
    {
        /// <summary>
        /// Creates an instance of UpdatedLeaderboardConfig1.
        /// </summary>
        /// <param name="id">id param</param>
        /// <param name="name">name param</param>
        /// <param name="sortOrder">The Sort Order of the Leaderboard, either Ascending (asc) or Descending (desc)</param>
        /// <param name="updateType">The Update Type of the Leaderboard, currently limited to Keep Best Score (keepBest), Keep Latest Score (keepLatest), Keep Total Score (aggregate)</param>
        /// <param name="updated">updated param</param>
        /// <param name="created">created param</param>
        /// <param name="bucketSize">bucketSize param</param>
        /// <param name="resetConfig">resetConfig param</param>
        /// <param name="tieringConfig">tieringConfig param</param>
        /// <param name="lastReset">lastReset param</param>
        /// <param name="versions">versions param</param>
        [Preserve]
        public UpdatedLeaderboardConfig1(string id, string name, SortOrderOptions sortOrder, UpdateTypeOptions updateType, DateTime updated, DateTime created, int bucketSize = default, LeaderboardConfig1ResetConfig resetConfig = default, LeaderboardConfig1TieringConfig tieringConfig = default, DateTime lastReset = default, List<LeaderboardVersion1> versions = default)
        {
            Id = id;
            BucketSize = bucketSize;
            Name = name;
            SortOrder = sortOrder;
            UpdateType = updateType;
            ResetConfig = resetConfig;
            TieringConfig = tieringConfig;
            Updated = updated;
            Created = created;
            LastReset = lastReset;
            Versions = versions;
        }

        /// <summary>
        /// Parameter id of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }
        
        /// <summary>
        /// Parameter bucketSize of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "bucketSize", EmitDefaultValue = false)]
        public int BucketSize{ get; }
        
        /// <summary>
        /// Parameter name of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// The Sort Order of the Leaderboard, either Ascending (asc) or Descending (desc)
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "sortOrder", IsRequired = true, EmitDefaultValue = true)]
        public SortOrderOptions SortOrder{ get; }
        
        /// <summary>
        /// The Update Type of the Leaderboard, currently limited to Keep Best Score (keepBest), Keep Latest Score (keepLatest), Keep Total Score (aggregate)
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "updateType", IsRequired = true, EmitDefaultValue = true)]
        public UpdateTypeOptions UpdateType{ get; }
        
        /// <summary>
        /// Parameter resetConfig of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "resetConfig", EmitDefaultValue = false)]
        public LeaderboardConfig1ResetConfig ResetConfig{ get; }
        
        /// <summary>
        /// Parameter tieringConfig of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "tieringConfig", EmitDefaultValue = false)]
        public LeaderboardConfig1TieringConfig TieringConfig{ get; }
        
        /// <summary>
        /// Parameter updated of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Updated{ get; }
        
        /// <summary>
        /// Parameter created of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Created{ get; }
        
        /// <summary>
        /// Parameter lastReset of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "lastReset", EmitDefaultValue = false)]
        public DateTime LastReset{ get; }
        
        /// <summary>
        /// Parameter versions of UpdatedLeaderboardConfig1
        /// </summary>
        [Preserve]
        [DataMember(Name = "versions", EmitDefaultValue = false)]
        public List<LeaderboardVersion1> Versions{ get; }
    
        /// <summary>
        /// The Sort Order of the Leaderboard, either Ascending (asc) or Descending (desc)
        /// </summary>
        /// <value>The Sort Order of the Leaderboard, either Ascending (asc) or Descending (desc)</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOrderOptions
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,
            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2
        }

        /// <summary>
        /// The Update Type of the Leaderboard, currently limited to Keep Best Score (keepBest), Keep Latest Score (keepLatest), Keep Total Score (aggregate)
        /// </summary>
        /// <value>The Update Type of the Leaderboard, currently limited to Keep Best Score (keepBest), Keep Latest Score (keepLatest), Keep Total Score (aggregate)</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateTypeOptions
        {
            /// <summary>
            /// Enum KeepBest for value: keepBest
            /// </summary>
            [EnumMember(Value = "keepBest")]
            KeepBest = 1,
            /// <summary>
            /// Enum KeepLatest for value: keepLatest
            /// </summary>
            [EnumMember(Value = "keepLatest")]
            KeepLatest = 2,
            /// <summary>
            /// Enum Aggregate for value: aggregate
            /// </summary>
            [EnumMember(Value = "aggregate")]
            Aggregate = 3
        }

        /// <summary>
        /// Formats a UpdatedLeaderboardConfig1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            serializedModel += "bucketSize," + BucketSize.ToString() + ",";
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "sortOrder," + SortOrder + ",";
            serializedModel += "updateType," + UpdateType + ",";
            if (ResetConfig != null)
            {
                serializedModel += "resetConfig," + ResetConfig.ToString() + ",";
            }
            if (TieringConfig != null)
            {
                serializedModel += "tieringConfig," + TieringConfig.ToString() + ",";
            }
            if (Updated != null)
            {
                serializedModel += "updated," + Updated.ToString() + ",";
            }
            if (Created != null)
            {
                serializedModel += "created," + Created.ToString() + ",";
            }
            if (LastReset != null)
            {
                serializedModel += "lastReset," + LastReset.ToString() + ",";
            }
            if (Versions != null)
            {
                serializedModel += "versions," + Versions.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UpdatedLeaderboardConfig1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            var bucketSizeStringValue = BucketSize.ToString();
            dictionary.Add("bucketSize", bucketSizeStringValue);
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            var sortOrderStringValue = SortOrder.ToString();
            dictionary.Add("sortOrder", sortOrderStringValue);
            
            var updateTypeStringValue = UpdateType.ToString();
            dictionary.Add("updateType", updateTypeStringValue);
            
            if (Updated != null)
            {
                var updatedStringValue = Updated.ToString();
                dictionary.Add("updated", updatedStringValue);
            }
            
            if (Created != null)
            {
                var createdStringValue = Created.ToString();
                dictionary.Add("created", createdStringValue);
            }
            
            if (LastReset != null)
            {
                var lastResetStringValue = LastReset.ToString();
                dictionary.Add("lastReset", lastResetStringValue);
            }
            
            return dictionary;
        }
    }
}
